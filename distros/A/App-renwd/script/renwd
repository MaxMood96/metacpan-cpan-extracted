#!perl

use strict;
use warnings;

use Complete::Util qw(complete_array_elem hashify_answer);
use Cwd qw(getcwd);
use Getopt::Long::Complete qw(GetOptionsWithCompletion);

our $AUTHORITY = 'cpan:PERLANCAR'; # AUTHORITY
our $DATE = '2025-06-24'; # DATE
our $DIST = 'App-renwd'; # DIST
our $VERSION = '0.009'; # VERSION

# FRAGMENT id=shcompgen-hint completer=1 for=renwd
# FRAGMENT id=shcompgen-hint completer=1 for=renwd-cd

my $cwd = getcwd();
my ($curname) = $cwd =~ m!/([^/]*)$!;
my $print = 0;

GetOptionsWithCompletion(
    sub {
        my %args = @_;
        my $type = $args{type};
        my $word = $args{word};

        if ($word eq '') {
            my $res = hashify_answer(
                complete_array_elem(
                    word=>$word, array=>[$curname, "$curname "]),
            );
            $res->{final} = 1;
            return $res;
        } elsif ($type eq 'arg') {
            my @dirs;
            opendir my $dh, "..";
            for my $e (readdir $dh) {
                next if $e eq '.' || $e eq '..';
                next unless -d "../$e";
                push @dirs, $e;
            }
            return complete_array_elem(
                word=>$word, array=>\@dirs);
        }
        undef;
    },
    'help|h' => sub {
        print <<USAGE;
Usage:
  % renwd <newname>
Options:
  --help, -h
  --version, -v
USAGE
        exit 0;
    },
    'version|v' => sub {
        no warnings 'once';
        print "renwd version ", ($main::VERSION || "dev"), "\n";
        exit 0;
    },
    print => \$print,
);
die "Usage: renwd <newname>\n" unless @ARGV == 1;

-e "../$ARGV[0]" and die "renwd: Can't rename: ../$ARGV[0] already exists\n";
rename "../$curname", "../$ARGV[0]" or die "renwd: Can't rename: $!\n";
print "$ARGV[0]\n" if $print;

1;
# ABSTRACT: REName current (Working) Directory
# PODNAME: renwd

__END__

=pod

=encoding UTF-8

=head1 NAME

renwd - REName current (Working) Directory

=head1 VERSION

This document describes version 0.009 of renwd (from Perl distribution App-renwd), released on 2025-06-24.

=head1 SYNOPSIS

This is a script to do the simple:

 % mv ../curdirname ../newname

except with one convenience: tab completion. If you activate tab completion for
this script (e.g. via C<complete -C renwd renwd>), then you can do:

 % renwd <Tab>

and the current directory name is completed for you to edit/modify/

=head1 DESCRIPTION

Why would you want to rename the current working directory? I often do this when
inside a directory and wanting to mark the directory as "processed" by adding
"-DONE" to its name. The name of the directory is often quite long, and
sometimes the parent directory contains a lot of subdirectories so you can't
rely on just the first 1-2 characters of the directory name to get a unique tab
completion. Hence this script.

=for BEGIN_BLOCK: protip_renwd_cd

Pro-tip: install this bash function to be able to rename current directory as
well as cd to the new directory (tab completion is also provided):

 # function definition
 renwd-cd ()
 {
     local dir=`renwd --print -- "$1" 2>/dev/null`
     if [[ "$dir" = "" ]]; then echo "Failed"; else cd "../$dir"; fi
 }
 
 # activate tab completion
 complete -C renwd renwd-cd

Afterwards, you can:

 % renwd-cd foo<Tab>

=for END_BLOCK: protip_renwd_cd

Note: C<renself> is an alias for C<renwd>.

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C renwd renwd

in your bash startup (e.g. C<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete renwd 'p/*/`renwd`/'

in your tcsh startup (e.g. C<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install C<shcompgen> (see above).

=head2 other shells

For fish and zsh, install C<shcompgen> as described above.

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-renwd>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-renwd>.

=head1 SEE ALSO

L<renlikewd> (from L<App::renlikewd>)

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 CONTRIBUTING


To contribute, you can send patches by email/via RT, or send pull requests on
GitHub.

Most of the time, you don't need to build the distribution yourself. You can
simply modify the code, then test via:

 % prove -l

If you want to build the distribution (e.g. to try to install it locally on your
system), you can install L<Dist::Zilla>,
L<Dist::Zilla::PluginBundle::Author::PERLANCAR>,
L<Pod::Weaver::PluginBundle::Author::PERLANCAR>, and sometimes one or two other
Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps required beyond
that are considered a bug and can be reported to me.

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2025 by perlancar <perlancar@cpan.org>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-renwd>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=cut
