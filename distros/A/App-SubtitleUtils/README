NAME
    App::SubtitleUtils - Utilities related to video subtitles

VERSION
    This document describes version 0.014 of App::SubtitleUtils (from Perl
    distribution App-SubtitleUtils), released on 2025-07-15.

DESCRIPTION
    This distributions provides the following command-line utilities:

    1. hms-secs
    2. rename-subtitle-files-like-their-movie-files
    3. srtadjust
    4. srtcheck
    5. srtcombine2text
    6. srtcombinetext
    7. srtparse
    8. srtrenumber
    9. srtscale
    10. srtshift
    11. srtsplit
    12. subscale
    13. subshift
    14. vtt2srt

FUNCTIONS
  srtcheck
    Usage:

     srtcheck(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Check the properness of SRT file.

    This function is not exported by default, but exportable.

    Arguments ('*' denotes required arguments):

    *   filename* => *filename*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  srtcombine2text
    Usage:

     srtcombine2text(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Combine the text of two subtitle files (e.g. for different languages)
    into one.

    This is a thin wrapper for srtcombinetext, for convenience. This:

     % srtcombine2text file1.srt file2.srt

    is equivalent to:

     % srtcombinetext file1.srt file2.srt -e 'if ($main::idx) { chomp; $_ = "<i></i>\n<i>$_</i>\n" }'

    For more customization, use *srtcombinetext* directly.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   filename1* => *filename*

        (No description)

    *   filename2* => *filename*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  srtcombinetext
    Usage:

     srtcombinetext(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Combine the text of two or more subtitle files (e.g. for different
    languages) into one.

    All the subtitle files must contain the same number of entries, with
    each entry containing the exact timestamps. The default is just to
    concatenate the text of each entry together, but you can customize each
    text using the "--eval" option.

    This function is not exported by default, but exportable.

    Arguments ('*' denotes required arguments):

    *   eval => *str*

        Perl code to evaluate on every text.

        This code will be evaluated for every text of each entry of each
        SRT, in the "main" package. $_ will be set to the text, $main::entry
        to the entry hash, $main::idx to the index of the files (starts at
        0).

        The code is expected to modify $_.

    *   filenames* => *array[filename]*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  srtdump
    Usage:

     srtdump(%args) -> [$status_code, $reason, $payload, \%result_meta]

    This function is not exported by default, but exportable.

    Arguments ('*' denotes required arguments):

    *   parsed* => *hash*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  srtparse
    Usage:

     srtparse(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Parse SRT and return data structure.

    This function is not exported by default, but exportable.

    Arguments ('*' denotes required arguments):

    *   filename => *filename*

        (No description)

    *   string => *str*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/App-SubtitleUtils>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-App-SubtitleUtils>.

SEE ALSO
HISTORY
    Most of them are scripts I first wrote in 2003 and first packaged as
    CPAN distribution in late 2020. They need to be rewritten to properly
    use Getopt::Long etc; someday.

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTOR
    Philippe Bruhat (BooK) <philippe@bruhat.net>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR,
    Pod::Weaver::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps
    required beyond that are considered a bug and can be reported to me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2025 by perlancar <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=App-SubtitleUtils>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

