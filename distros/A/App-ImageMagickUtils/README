NAME
    App::ImageMagickUtils - Utilities related to ImageMagick

VERSION
    This document describes version 0.024 of App::ImageMagickUtils (from
    Perl distribution App-ImageMagickUtils), released on 2024-12-21.

DESCRIPTION
    This distribution includes the following CLI utilities related to
    ImageMagick:

    1. calc-image-resized-size
    2. convert-image-to
    3. convert-image-to-jpg
    4. convert-image-to-pdf
    5. convert-image-to-png
    6. downsize-image
    7. image-resize-notation-to-human
    8. img2jpg
    9. img2pdf
    10. img2png
    11. jpg2png
    12. png2jpg

FUNCTIONS
  convert_image_to
    Usage:

     convert_image_to(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Convert images using ImageMagick's 'convert' utility, with multiple file
    support and automatic output naming.

    This is a simple wrapper to ImageMagick's "convert" utility to let you
    process multiple files using a single command:

     % convert-image-to --to pdf *.jpg

    is basically equivalent to:

     % for f in *.jpg; do convert "$f" "$f.pdf"; done

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   delete_original => *bool*

        Delete (unlink) the original file after downsizing.

        See also the "trash_original" option.

    *   files* => *array[filename]*

        (No description)

    *   quality => *int* (default: 92)

        Quality setting (for JPEG/PNG), 1 (best compression, worst quality)
        to 100 (least compression, best quality).

    *   to* => *str*

        (No description)

    *   trash_original => *bool*

        Trash the original file after downsizing.

        This option uses the File::Trash::FreeDesktop module to do the
        trashing. Compared to deletion, with this option you can still
        restore the trashed original files from the Trash directory.

        See also the "delete_original" option.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  convert_image_to_jpg
    Usage:

     convert_image_to_jpg(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Convert images to JPG using ImageMagick's 'convert' utility.

    This is a wrapper to "convert-image-to", with "--to" set to "jpg":

     % convert-image-to-pdf *.png

    is equivalent to:

     % convert-image-to --to jpg *.png

    which in turn is equivalent to:

     % for f in *.png; do convert "$f" "$f.jpg"; done

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   delete_original => *bool*

        Delete (unlink) the original file after downsizing.

        See also the "trash_original" option.

    *   files* => *array[filename]*

        (No description)

    *   quality => *int* (default: 92)

        Quality setting (for JPEG/PNG), 1 (best compression, worst quality)
        to 100 (least compression, best quality).

    *   trash_original => *bool*

        Trash the original file after downsizing.

        This option uses the File::Trash::FreeDesktop module to do the
        trashing. Compared to deletion, with this option you can still
        restore the trashed original files from the Trash directory.

        See also the "delete_original" option.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  convert_image_to_pdf
    Usage:

     convert_image_to_pdf(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Convert images to PDF using ImageMagick's 'convert' utility.

    This is a wrapper to "convert-image-to", with "--to" set to "pdf":

     % convert-image-to-pdf *.jpg

    is equivalent to:

     % convert-image-to --to pdf *.jpg

    which in turn is equivalent to:

     % for f in *.jpg; do convert "$f" "$f.pdf"; done

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   delete_original => *bool*

        Delete (unlink) the original file after downsizing.

        See also the "trash_original" option.

    *   files* => *array[filename]*

        (No description)

    *   trash_original => *bool*

        Trash the original file after downsizing.

        This option uses the File::Trash::FreeDesktop module to do the
        trashing. Compared to deletion, with this option you can still
        restore the trashed original files from the Trash directory.

        See also the "delete_original" option.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  convert_image_to_png
    Usage:

     convert_image_to_png(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Convert images to JPG using ImageMagick's 'convert' utility.

    This is a wrapper to "convert-image-to", with "--to" set to "png":

     % convert-image-to-png *.jpg

    is equivalent to:

     % convert-image-to --to png *.jpg

    which in turn is equivalent to:

     % for f in *.jpg; do convert "$f" "$f.png"; done

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   delete_original => *bool*

        Delete (unlink) the original file after downsizing.

        See also the "trash_original" option.

    *   files* => *array[filename]*

        (No description)

    *   quality => *int* (default: 92)

        Quality setting (for JPEG/PNG), 1 (best compression, worst quality)
        to 100 (least compression, best quality).

    *   trash_original => *bool*

        Trash the original file after downsizing.

        This option uses the File::Trash::FreeDesktop module to do the
        trashing. Compared to deletion, with this option you can still
        restore the trashed original files from the Trash directory.

        See also the "delete_original" option.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  downsize_image
    Usage:

     downsize_image(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Reduce image size, by default via compressing to JPEG quality 40 and
    downsizing to 1024p.

    This utility uses convert utility to compress an image into JPEG with
    default quality of 40 and downsized to 1024p (shortest side to 1024px).

    Output filenames are:

     ORIGINAL_NAME.q40.jpg

    or (if downsizing is done):

     ORIGINAL_NAME.1024p-q40.jgp

    This function is not exported.

    This function supports dry-run operation.

    Arguments ('*' denotes required arguments):

    *   delete_original => *bool*

        Delete (unlink) the original file after downsizing.

        See also the "trash_original" option.

    *   downsize_to => *str* (default: 1024)

        Downsizing will only be done if the input image's shortest side is
        indeed larger then the target downsize.

        To disable downsizing, set "--downsize-to" to '' (empty string), or
        specify on "--dont-downsize" on the CLI.

    *   files* => *array[filename]*

        (No description)

    *   quality => *int* (default: 40)

        Quality setting (for JPEG/PNG), 1 (best compression, worst quality)
        to 100 (least compression, best quality).

    *   skip_downsized => *bool* (default: 1)

        Skip previously downsized images.

        By default, when given a filename that looks like it's already
        downsized, e.g. "foo.1024-q40.jpg" or "foo.q40.jpg", will skip
        downsizing. The "--no-skip-downsized" option will process such
        filenames nevertheless.

    *   skip_whatsapp => *bool* (default: 1)

        Skip WhatsApp images.

        By default, assuming that WhatsApp already compresses images, when
        given a filename that matches a WhatsApp image filename, e.g.
        "IMG-20220508-WA0001.jpg" (will be checked using
        Regexp::Pattern::Filename::Type::Image::WhatsApp), will skip
        downsizing. The "--no-skip-whatsapp" option will process such
        filenames nevertheless.

    *   trash_original => *bool*

        Trash the original file after downsizing.

        This option uses the File::Trash::FreeDesktop module to do the
        trashing. Compared to deletion, with this option you can still
        restore the trashed original files from the Trash directory.

        See also the "delete_original" option.

    Special arguments:

    *   -dry_run => *bool*

        Pass -dry_run=>1 to enable simulation mode.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

FAQ
  I got error message "attempt to perform an operation not allowed by the security policy `PDF' @ error/constitute.c/IsCoderAuthorized/426."
    See solutions like described in
    <https://stackoverflow.com/questions/52998331/imagemagick-security-polic
    y-pdf-blocking-conversion>

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/App-ImageMagickUtils>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-App-ImageMagickUtils>.

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR,
    Pod::Weaver::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps
    required beyond that are considered a bug and can be reported to me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2024 by perlancar <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=App-ImageMagickUtils>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

