NAME
    App::GitUtils - Some additional command-line utilities for git

VERSION
    This document describes version 0.091 of App::GitUtils (from Perl
    distribution App-GitUtils), released on 2025-09-24.

SYNOPSIS
    This distribution provides the following command-line utilities:

    *   gu

    *   this-repo

    These utilities provide some shortcuts and tab completion to make it
    more convenient when working with git con the command-line.

FUNCTIONS
  calc_committing_total_size
    Usage:

     calc_committing_total_size(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Calculate the total sizes of files to add/delete/modify.

    To be used in pre-commit script, for example.

    Some applications: Github limits commit total size to 2GB.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   include_untracked => *bool* (default: 1)

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  calc_untracked_total_size
    Usage:

     calc_untracked_total_size(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Check the disk usage of untracked files.

    This routine basically just grabs the list of untracked files returned
    by status() ("gu status") then checks their disk usage and totals them.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   detail => *bool*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  clone_to_bare
    Usage:

     clone_to_bare(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Clone repository to a bare repository.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   dir => *dirname*

        A directory inside git repo.

        If not specified, will assume current directory is inside git
        repository and will search ".git" upwards.

    *   target_dir => *dirname*

        Target repo directory.

        If not specified, defaults to "$repodir.bare/".

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  get_git_dir
    Usage:

     get_git_dir(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Get the path to the .git directory.

    Basically just the "git_dir" information from "gu info". Useful in shell
    scripts.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   dir => *dirname*

        A directory inside git repo.

        If not specified, will assume current directory is inside git
        repository and will search ".git" upwards.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  info
    Usage:

     info(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Return information about git repository.

    Information include:

    *   Path of the git directory

    *   Repository name

    *   Current/active branch

    Will return status 412 if working directory is not inside a git
    repository. Will return status 500 on errors, e.g. if "git" command
    cannot recognize the repository.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   dir => *dirname*

        A directory inside git repo.

        If not specified, will assume current directory is inside git
        repository and will search ".git" upwards.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  list_committing_large_files
    Usage:

     list_committing_large_files(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Check that added/modified files in staged/unstaged do not exceed a
    certain size.

    Will return an enveloped result with payload true containing
    added/modified files in staged/unstaged that are larger than a certain
    specified "max_size".

    To be used in a pre-commit script, for example.

    Some applications: Github for example warns when a file is above 50MB
    and rejects when a file is above 100MB in size.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   detail => *bool*

        (No description)

    *   include_untracked => *bool* (default: 1)

        (No description)

    *   max_size => *datasize* (default: 104856576)

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  list_hooks
    Usage:

     list_hooks(%args) -> [$status_code, $reason, $payload, \%result_meta]

    List available hooks for the repository.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   dir => *dirname*

        A directory inside git repo.

        If not specified, will assume current directory is inside git
        repository and will search ".git" upwards.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  post_commit
    Usage:

     post_commit(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Run post-commit hook.

    Basically the same as:

     % .git/hooks/post-commit

    except can be done anywhere inside git repo.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   dir => *dirname*

        A directory inside git repo.

        If not specified, will assume current directory is inside git
        repository and will search ".git" upwards.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  pre_commit
    Usage:

     pre_commit(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Run pre-commit hook.

    Basically the same as:

     % .git/hooks/pre-commit

    except can be done anywhere inside git repo.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   dir => *dirname*

        A directory inside git repo.

        If not specified, will assume current directory is inside git
        repository and will search ".git" upwards.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  run_hook
    Usage:

     run_hook(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Run a hook.

    Basically the same as:

     % .git/hooks/<hook-name>

    except can be done anywhere inside git repo and provides tab completion.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   dir => *dirname*

        A directory inside git repo.

        If not specified, will assume current directory is inside git
        repository and will search ".git" upwards.

    *   name* => *str*

        Hook name, e.g. post-commit.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  split_commit_add_untracked
    Usage:

     split_commit_add_untracked(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Commit untracked files, possibly over several commits, keeping commit
    size under certain limit.

    This function is not exported.

    This function supports dry-run operation.

    Arguments ('*' denotes required arguments):

    *   max_size => *datasize* (default: 2146435072)

        (No description)

    Special arguments:

    *   -dry_run => *bool*

        Pass -dry_run=>1 to enable simulation mode.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  status
    Usage:

     status(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Run `git status` and return information as a data structure.

    Currently incomplete!

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   untracked => *str* (default: "normal")

        Untracked files option, will be passed as `-u` option to `git
        status`.

        This will be passed to "git status" in the "-u" option.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

ENVIRONMENT
  GITUTILS_TRACE
    Boolean. If set to true, will produce additional log statements using
    Log::ger at the trace level.

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/App-GitUtils>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-App-GitUtils>.

SEE ALSO
    App::GitHubUtils

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTOR
    Steven Haryanto <stevenharyanto@gmail.com>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR,
    Pod::Weaver::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps
    required beyond that are considered a bug and can be reported to me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2025 by perlancar <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=App-GitUtils>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

