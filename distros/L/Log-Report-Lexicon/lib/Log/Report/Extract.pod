=encoding utf8

=head1 NAME

Log::Report::Extract - Collect translatable strings

=head1 INHERITANCE

 Log::Report::Extract is extended by
   Log::Report::Extract::PerlPPI

=head1 SYNOPSIS

  # See the extensions

=head1 DESCRIPTION

This module helps maintaining the POT files, updating the list of
message-ids which are kept in them.  After initiation, the L<process()|Log::Report::Extract/"Processors">
method needs to be called with all files which changed since last
processing and the existing PO files will get updated accordingly.  If no
translations exist yet, one C<textdomain/xx.po> file will be created.

=head1 METHODS

=head2 Constructors

=over 4

=item $class-E<gt>B<new>(%options)

Z<>

 -Option --Default
  charset  'utf-8'
  lexicon  <required>

=over 2

=item charset => STRING

The character-set used in the PO files.

=item lexicon => DIRECTORY

The place where the lexicon is kept.  When no lexicon is defined yet,
this will be the directory where an C<domain/xx.po> file will be created.

=back

=back

=head2 Accessors

=over 4

=item $obj-E<gt>B<addPot>($domain, $pot, %options)

Z<>

=item $obj-E<gt>B<charset>()

Returns the character-set used inside the POT files.

=item $obj-E<gt>B<domains>()

Returns a sorted list of all known domain names.

=item $obj-E<gt>B<index>()

Returns the L<Log::Report::Lexicon::Index|Log::Report::Lexicon::Index> object, which is listing
the files in the lexicon directory tree.

=item $obj-E<gt>B<pots>($domain)

Returns the list of L<Log::Report::Lexicon::POT|Log::Report::Lexicon::POT> objects which contain
the tables for C<$domain>.

=back

=head2 Processors

=over 4

=item $obj-E<gt>B<cleanup>(%options)

Remove all references.

 -Option--Default
  keep    []

=over 2

=item keep => HASH|ARRAY

Keep the information about these filename, either specified as ARRAY of
names, or a HASH where the keys are the named.

=back

=item $obj-E<gt>B<process>($filename, %options)

Update the domains mentioned in the C<$filename>.  All text-domains defined
in the file will get updated automatically, but should not written before
all files are processed.

Returned is the number of messages found in this particular file.

=item $obj-E<gt>B<showStats>( [$domains] )

Show a status about the DOMAIN (by default all domains).  At least mode
verbose is required to see this.

The statistics are sent to (Log::Report) dispatchers which accept
notice and info.  This could be syslog.  When you have no explicit
dispatchers in your program, the level of detail get controlled by
the 'mode':

  use Log::Report mode => 'DEBUG';  # or 'VERBOSE'

=item $obj-E<gt>B<store>( $domain, $filename, $linenr, $context, $msg, [$msg_plural] )

Register the existence of a (C<$msg>, C<$msg_plural>) in all POTs of
the C<$domain>.

=item $obj-E<gt>B<write>( [$domain], %options )

Update the information of the files related to C<$domain>, by default all
processed DOMAINS.

All information known about the written C<$domain> is removed from the cache.
The C<%options> are passed to the C<write()> of the specific lexicon
manager.

=back

=head1 DIAGNOSTICS

=over 4

=item Fault: cannot create lexicon directory $dir: $!

Cast by new()

=item Error: extractions require an explicit lexicon directory

Cast by new()

=item Error: no context tags allowed in plural `$msgid'

Cast by store()

=item Info: starting new textdomain $domain, template in $filename

Cast by write()

=back

=head1 SEE ALSO

This module is part of Log-Report-Lexicon version 1.14,
built on September 08, 2025. Website: F<http://perl.overmeer.net/CPAN/>

=head1 LICENSE

For contributors see file ChangeLog.

This software is copyright (c) 2007-2025 by Mark Overmeer.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

