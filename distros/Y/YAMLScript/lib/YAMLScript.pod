=pod

=encoding utf8

=head1 NAME

YAMLScript - Program in YAML — Code is Data

=head2 SYNOPSIS

    #!/usr/bin/env ys-0

    defn main(name='world'):
      say: "Hello, $name!"
=head2 DESCRIPTION

YAMLScript is a functional programming language with a stylized YAML syntax.

YAMLScript can be used for:

=over

=item * Writing new programs and applications

=over

=item * Run with C<ys file.ys>

=item * Or compile to binary executable with C<ys -C file.ys>

=back

=item * Enhancing ordinary YAML files with new functional magics

=over

=item * Import parts of other YAML files to any node

=item * String interpolation including function calls

=item * Any other functionality you can dream up!

=back

=item * Writing reusable shared libraries

=over

=item * High level code instead of C

=item * Bindable to almost any programming language

=back

=back

YAMLScript should be a drop-in replacement for your YAML loader!

Most existing YAML files are already valid YAMLScript files. This means that YAMLScript works as a normal YAML loader, but can also evaluate functional expressions if asked to.

Under the hood, YAMLScript code compiles to the Clojure programming language. This makes YAMLScript a complete functional programming language right out of the box.

Even though YAMLScript compiles to Clojure, and Clojure compiles to Java, there is no dependency on Java or the JVM. YAMLScript is compiled to a native shared library (C<libys.so>) that can be used by any programming language that can load shared libraries.

To see the Clojure code that YAMLScript compiles to, you can use the YAMLScript command line utility, C<ys>, to run:

    $ ys --compile file.ys
=head2 PERL USAGE

File C<prog.pl>:

    use YAMLScript;
    use JSON;
    my $ys = YAMLScript->new;
    my $input = do { local $/; open my $fh, '<', 'file.ys'; <$fh> };
    my $data = $ys->load($input);
    print encode_json $data;
File C<file.ys>:

    !ys-0

    name =: "World"

    =>::
      foo: [1, 2, ! inc(41)]
      bar:: load("other.yaml")
      baz:: "Hello, $name!"
File C<other.yaml>:

    oh: Hello
Run:

    $ perl prog.pl
    {"foo":[1,2,42],"baz":"Hello, World!","bar":{"oh":"Hello"}}
=head2 INSTALLATION

You can install this module like any other Perl module:

    cpanm YAMLScript
but you will need to have a system install of C<libys.so>.

One simple way to do that is with:

    curl https://yamlscript.org/install | bash
Note: The above command will install the latest version of the YAMLScript command line utility, C<ys>, and the shared library, C<libys.so>, into C<~/local/bin> and C<~/.local/lib> respectively.

See L<https://github.com/yaml/yamlscript?#installing-yamlscript|https://github.com/yaml/yamlscript?#installing-yamlscript> for more info.

=head2 SEE ALSO

=over

=item * L<The YAMLScript Web Site|https://yamlscript.org>

=item * L<The YAMLScript Blog|https://yamlscript.org/blog>

=item * L<The YAMLScript Source Code|https://github.com/yaml/yamlscript>

=item * L<YAML|https://yaml.org>

=item * L<Clojure|https://clojure.org>

=back

=head2 AUTHORS

=over

=item * L<Ingy döt Net|https://github.com/ingydotnet>

=item * L<José Joaquín Atria|https://github.com/jjatria>

=back

=head2 LICENSE & COPYRIGHT

Copyright 2022-2025 Ingy döt Net L<ingy@ingy.net|mailto:ingy@ingy.net>

This project is licensed under the terms of the C<MIT> license. See L<LICENSE|https://github.com/yaml/yamlscript/blob/main/License> for more details.

=cut
