# PODNAME: Config::Model::models::Systemd::Section::SocketUnit
# ABSTRACT:  Configuration class Systemd::Section::SocketUnit

=encoding utf8

=head1 NAME

Config::Model::models::Systemd::Section::SocketUnit - Configuration class Systemd::Section::SocketUnit

=head1 DESCRIPTION

Configuration classes used by L<Config::Model>

=head1 Elements

=head2 Description

A brief, meaningful, human-readable text identifying the unit. This may be used by
systemd (and suitable UIs) as a user-visible label for the unit, so this string
should identify the unit rather than just describe it, despite the name. This string also should not
just repeat the unit name. C<Apache HTTP Server> or C<Postfix Mail
Server> are good examples. Bad examples are C<high-performance lightweight HTTP
server> (too generic) or C<Apache> (meaningless for people who do not know
the Apache HTTP server project, duplicates the unit name). systemd may use this
string as a noun in status messages (C<Starting
Description...>, C<Started
Description.>, C<Reached target
Description.>, C<Failed to start
Description.>), so it should be capitalized, and should not be a
full sentence, or a phrase with a verb conjugated in the present continuous, or end in a full
stop. Bad examples include C<exiting the container>, C<updating the database
once per day.>, or C<OpenSSH server second instance daemon>. I< Optional. Type uniline.  > 

=head2 Documentation

A space-separated list of URIs referencing
documentation for this unit or its configuration. Accepted are
only URIs of the types C<http://>,
C<https://>, C<file:>,
C<info:>, C<man:>. For more
information about the syntax of these URIs, see L<uri(7)>.
The URIs should be listed in order of relevance, starting with
the most relevant. It is a good idea to first reference
documentation that explains what the unit's purpose is,
followed by how it is configured, followed by any other
related documentation. This option may be specified more than
once, in which case the specified list of URIs is merged. If
the empty string is assigned to this option, the list is reset
and all prior assignments will have no
effect. I< Optional. Type list of uniline.  > 

=head2 Wants

Configures (weak) requirement dependencies on other units. This option may be
specified more than once or multiple space-separated units may be specified in one option in which
case dependencies for all listed names will be created. Dependencies of this type may also be
configured outside of the unit configuration file by adding a symlink to a
C<.wants/> directory accompanying the unit file. For details, see above.

Units listed in this option will be started if the configuring unit is. However, if the listed
units fail to start or cannot be added to the transaction, this has no impact on the validity of the
transaction as a whole, and this unit will still be started. This is the recommended way to hook
the start-up of one unit to the start-up of another unit.

Note that requirement dependencies do not influence the order in which services are started or
stopped. This has to be configured independently with the C<After> or
C<Before> options. If unit C<foo.service> pulls in unit
C<bar.service> as configured with C<Wants> and no ordering is
configured with C<After> or C<Before>, then both units will be
started simultaneously and without any delay between them if C<foo.service> is
activated. I< Optional. Type list of uniline.  > 

=head2 Requires

Similar to C<Wants>, but declares a stronger requirement
dependency. Dependencies of this type may also be configured by adding a symlink to a
C<.requires/> directory accompanying the unit file.

If this unit gets activated, the units listed will be activated as well. If one of
the other units fails to activate, and an ordering dependency C<After> on the
failing unit is set, this unit will not be started. Besides, with or without specifying
C<After>, this unit will be stopped (or restarted) if one of the other units is
explicitly stopped (or restarted).

Often, it is a better choice to use C<Wants> instead of
C<Requires> in order to achieve a system that is more robust when dealing with
failing services.

Note that this dependency type does not imply that the other unit always has to be in active state when
this unit is running. Specifically: failing condition checks (such as C<ConditionPathExists>,
C<ConditionPathIsSymbolicLink>, … — see below) do not cause the start job of a unit with a
C<Requires> dependency on it to fail. Also, some unit types may deactivate on their own (for
example, a service process may decide to exit cleanly, or a device may be unplugged by the user), which is not
propagated to units having a C<Requires> dependency. Use the C<BindsTo>
dependency type together with C<After> to ensure that a unit may never be in active state
without a specific other unit also in active state (see below). I< Optional. Type list of uniline.  > 

=head2 Requisite

Similar to C<Requires>. However, if the units listed here
are not started already, they will not be started and the starting of this unit will fail
immediately. C<Requisite> does not imply an ordering dependency, even if
both units are started in the same transaction. Hence this setting should usually be
combined with C<After>, to ensure this unit is not started before the other
unit.

When C<Requisite=b.service> is used on
C<a.service>, this dependency will show as
C<RequisiteOf=a.service> in property listing of
C<b.service>. C<RequisiteOf>
dependency cannot be specified directly. I< Optional. Type list of uniline.  > 

=head2 BindsTo

Configures requirement dependencies, very similar in style to
C<Requires>. However, this dependency type is stronger: in addition to the effect of
C<Requires> it declares that if the unit bound to is stopped, this unit will be stopped
too. This means a unit bound to another unit that suddenly enters inactive state will be stopped too.
Units can suddenly, unexpectedly enter inactive state for different reasons: the main process of a service unit
might terminate on its own choice, the backing device of a device unit might be unplugged or the mount point of
a mount unit might be unmounted without involvement of the system and service manager.

When used in conjunction with C<After> on the same unit the behaviour of
C<BindsTo> is even stronger. In this case, the unit bound to strictly has to be in active
state for this unit to also be in active state. This not only means a unit bound to another unit that suddenly
enters inactive state, but also one that is bound to another unit that gets skipped due to an unmet condition
check (such as C<ConditionPathExists>, C<ConditionPathIsSymbolicLink>, … —
see below) will be stopped, should it be running. Hence, in many cases it is best to combine
C<BindsTo> with C<After>.

When C<BindsTo=b.service> is used on
C<a.service>, this dependency will show as
C<BoundBy=a.service> in property listing of
C<b.service>. C<BoundBy>
dependency cannot be specified directly. I< Optional. Type list of uniline.  > 

=head2 PartOf

Configures dependencies similar to
C<Requires>, but limited to stopping and
restarting of units. When systemd stops or restarts the units
listed here, the action is propagated to this unit. Note that
this is a one-way dependency — changes to this unit do not
affect the listed units.

When C<PartOf=b.service> is used on
C<a.service>, this dependency will show as
C<ConsistsOf=a.service> in property listing of
C<b.service>. C<ConsistsOf>
dependency cannot be specified directly. I< Optional. Type list of uniline.  > 

=head2 Upholds

Configures dependencies similar to C<Wants>, but as long as this unit
is up, all units listed in C<Upholds> are started whenever found to be inactive or
failed, and no job is queued for them. While a C<Wants> dependency on another unit
has a one-time effect when this units started, a C<Upholds> dependency on it has a
continuous effect, constantly restarting the unit if necessary. This is an alternative to the
C<Restart> setting of service units, to ensure they are kept running whatever
happens. The restart happens without delay, and usual per-unit rate-limit applies.

When C<Upholds=b.service> is used on C<a.service>, this
dependency will show as C<UpheldBy=a.service> in the property listing of
C<b.service>. I< Optional. Type uniline.  > 

=head2 Conflicts

A space-separated list of unit names. Configures negative requirement
dependencies. If a unit has a C<Conflicts> requirement on a set of other units,
then starting it will stop all of them and starting any of them will stop it.

Note that this setting does not imply an ordering dependency, similarly to the
C<Wants> and C<Requires> dependencies described above. This means
that to ensure that the conflicting unit is stopped before the other unit is started, an
C<After> or C<Before> dependency must be declared. It does not
matter which of the two ordering dependencies is used, because stop jobs are always ordered before
start jobs, see the discussion in C<Before>/C<After> below.

If unit A that conflicts with unit B is scheduled to
be started at the same time as B, the transaction will either
fail (in case both are required parts of the transaction) or be
modified to be fixed (in case one or both jobs are not a
required part of the transaction). In the latter case, the job
that is not required will be removed, or in case both are
not required, the unit that conflicts will be started and the
unit that is conflicted is stopped. I< Optional. Type list of uniline.  > 

=head2 Before

These two settings expect a space-separated list of unit names. They may be specified
more than once, in which case dependencies for all listed names are created.

Those two settings configure ordering dependencies between units. If unit
C<foo.service> contains the setting C<Before=bar.service> and both
units are being started, C<bar.service>'s start-up is delayed until
C<foo.service> has finished starting up. C<After> is the inverse
of C<Before>, i.e. while C<Before> ensures that the configured unit
is started before the listed unit begins starting up, C<After> ensures the opposite,
that the listed unit is fully started up before the configured unit is started.

When two units with an ordering dependency between them are shut down, the inverse of the
start-up order is applied. I.e. if a unit is configured with C<After> on another
unit, the former is stopped before the latter if both are shut down. Given two units with any
ordering dependency between them, if one unit is shut down and the other is started up, the shutdown
is ordered before the start-up. It does not matter if the ordering dependency is
C<After> or C<Before>, in this case. It also does not matter which
of the two is shut down, as long as one is shut down and the other is started up; the shutdown is
ordered before the start-up in all cases. If two units have no ordering dependencies between them,
they are shut down or started up simultaneously, and no ordering takes place. It depends on the unit
type when precisely a unit has finished starting up. Most importantly, for service units start-up is
considered completed for the purpose of C<Before>/C<After> when all
its configured start-up commands have been invoked and they either failed or reported start-up
success. Note that this includes C<ExecStartPost> (or
C<ExecStopPost> for the shutdown case).

Note that those settings are independent of and orthogonal to the requirement dependencies as
configured by C<Requires>, C<Wants>, C<Requisite>,
or C<BindsTo>. It is a common pattern to include a unit name in both the
C<After> and C<Wants> options, in which case the unit listed will
be started before the unit that is configured with these options.

Note that C<Before> dependencies on device units have no effect and are not
supported.  Devices generally become available as a result of an external hotplug event, and systemd
creates the corresponding device unit without delay. I< Optional. Type list of uniline.  > 

=head2 After

These two settings expect a space-separated list of unit names. They may be specified
more than once, in which case dependencies for all listed names are created.

Those two settings configure ordering dependencies between units. If unit
C<foo.service> contains the setting C<Before=bar.service> and both
units are being started, C<bar.service>'s start-up is delayed until
C<foo.service> has finished starting up. C<After> is the inverse
of C<Before>, i.e. while C<Before> ensures that the configured unit
is started before the listed unit begins starting up, C<After> ensures the opposite,
that the listed unit is fully started up before the configured unit is started.

When two units with an ordering dependency between them are shut down, the inverse of the
start-up order is applied. I.e. if a unit is configured with C<After> on another
unit, the former is stopped before the latter if both are shut down. Given two units with any
ordering dependency between them, if one unit is shut down and the other is started up, the shutdown
is ordered before the start-up. It does not matter if the ordering dependency is
C<After> or C<Before>, in this case. It also does not matter which
of the two is shut down, as long as one is shut down and the other is started up; the shutdown is
ordered before the start-up in all cases. If two units have no ordering dependencies between them,
they are shut down or started up simultaneously, and no ordering takes place. It depends on the unit
type when precisely a unit has finished starting up. Most importantly, for service units start-up is
considered completed for the purpose of C<Before>/C<After> when all
its configured start-up commands have been invoked and they either failed or reported start-up
success. Note that this includes C<ExecStartPost> (or
C<ExecStopPost> for the shutdown case).

Note that those settings are independent of and orthogonal to the requirement dependencies as
configured by C<Requires>, C<Wants>, C<Requisite>,
or C<BindsTo>. It is a common pattern to include a unit name in both the
C<After> and C<Wants> options, in which case the unit listed will
be started before the unit that is configured with these options.

Note that C<Before> dependencies on device units have no effect and are not
supported.  Devices generally become available as a result of an external hotplug event, and systemd
creates the corresponding device unit without delay. I< Optional. Type list of uniline.  > 

=head2 OnFailure

A space-separated list of one or more units that are activated when this unit enters
the C<failed> state. I< Optional. Type uniline.  > 

=head2 OnSuccess

A space-separated list of one or more units that are activated when this unit enters
the C<inactive> state. I< Optional. Type uniline.  > 

=head2 PropagatesReloadTo

A space-separated list of one or more units to which reload requests from this unit
shall be propagated to, or units from which reload requests shall be propagated to this unit,
respectively. Issuing a reload request on a unit will automatically also enqueue reload requests on
all units that are linked to it using these two settings. I< Optional. Type uniline.  > 

=head2 ReloadPropagatedFrom

A space-separated list of one or more units to which reload requests from this unit
shall be propagated to, or units from which reload requests shall be propagated to this unit,
respectively. Issuing a reload request on a unit will automatically also enqueue reload requests on
all units that are linked to it using these two settings. I< Optional. Type uniline.  > 

=head2 PropagatesStopTo

A space-separated list of one or more units to which stop requests from this unit
shall be propagated to, or units from which stop requests shall be propagated to this unit,
respectively. Issuing a stop request on a unit will automatically also enqueue stop requests on all
units that are linked to it using these two settings. I< Optional. Type uniline.  > 

=head2 StopPropagatedFrom

A space-separated list of one or more units to which stop requests from this unit
shall be propagated to, or units from which stop requests shall be propagated to this unit,
respectively. Issuing a stop request on a unit will automatically also enqueue stop requests on all
units that are linked to it using these two settings. I< Optional. Type uniline.  > 

=head2 JoinsNamespaceOf

For units that start processes (such as service units), lists one or more other units
whose network and/or temporary file namespace to join. If this is specified on a unit (say,
C<a.service> has C<JoinsNamespaceOf=b.service>), then the inverse
dependency (C<JoinsNamespaceOf=a.service> for b.service) is implied. This only
applies to unit types which support the C<PrivateNetwork>,
C<NetworkNamespacePath>, C<PrivateIPC>,
C<IPCNamespacePath>, and C<PrivateTmp> directives (see
L<systemd.exec(5)> for
details). If a unit that has this setting set is started, its processes will see the same
C</tmp/>, C</var/tmp/>, IPC namespace and network namespace as
one listed unit that is started. If multiple listed units are already started and these do not share
their namespace, then it is not defined which namespace is joined. Note that this setting only has an
effect if C<PrivateNetwork>/C<NetworkNamespacePath>,
C<PrivateIPC>/C<IPCNamespacePath> and/or
C<PrivateTmp> is enabled for both the unit that joins the namespace and the unit
whose namespace is joined. I< Optional. Type uniline.  > 

=head2 RequiresMountsFor

Takes a space-separated list of absolute
paths. Automatically adds dependencies of type
C<Requires> and C<After> for
all mount units required to access the specified path.

Mount points marked with C<noauto> are not
mounted automatically through C<local-fs.target>,
but are still honored for the purposes of this option, i.e. they
will be pulled in by this unit. I< Optional. Type uniline.  > 

=head2 WantsMountsFor

Same as C<RequiresMountsFor>,
but adds dependencies of type C<Wants> instead
of C<Requires>. I< Optional. Type uniline.  > 

=head2 OnSuccessJobMode

Takes a value of
C<fail>,
C<replace>,
C<replace-irreversibly>,
C<isolate>,
C<flush>,
C<ignore-dependencies> or
C<ignore-requirements>. Defaults to
C<replace>. Specifies how the units listed in
C<OnSuccess>/C<OnFailure> will be enqueued. See
L<systemctl(1)>'s
C<--job-mode=> option for details on the
possible values. If this is set to C<isolate>,
only a single unit may be listed in
C<OnSuccess>/C<OnFailure>. I< Optional. Type uniline.  > 

=head2 OnFailureJobMode

Takes a value of
C<fail>,
C<replace>,
C<replace-irreversibly>,
C<isolate>,
C<flush>,
C<ignore-dependencies> or
C<ignore-requirements>. Defaults to
C<replace>. Specifies how the units listed in
C<OnSuccess>/C<OnFailure> will be enqueued. See
L<systemctl(1)>'s
C<--job-mode=> option for details on the
possible values. If this is set to C<isolate>,
only a single unit may be listed in
C<OnSuccess>/C<OnFailure>. I< Optional. Type uniline.  > 

Note: OnFailureJobMode is migrated with 'C<$unit>' and with: 

=over

=item *

C<$unit> => C<- OnFailureIsolate>

=back



=head2 IgnoreOnIsolate

Takes a boolean argument. If C<true>, this unit will not be stopped
when isolating another unit. Defaults to C<false> for service, target, socket, timer,
and path units, and C<true> for slice, scope, device, swap, mount, and automount
units. I< Optional. Type boolean.  > 

=head2 StopWhenUnneeded

Takes a boolean argument. If
C<true>, this unit will be stopped when it is no
longer used. Note that, in order to minimize the work to be
executed, systemd will not stop units by default unless they
are conflicting with other units, or the user explicitly
requested their shut down. If this option is set, a unit will
be automatically cleaned up if no other active unit requires
it. Defaults to C<false>. I< Optional. Type boolean.  > 

=over 4

=item upstream_default value :

no

=back



=head2 RefuseManualStart

Takes a boolean argument. If
C<true>, this unit can only be activated or
deactivated indirectly. In this case, explicit start-up or
termination requested by the user is denied, however if it is
started or stopped as a dependency of another unit, start-up
or termination will succeed. This is mostly a safety feature
to ensure that the user does not accidentally activate units
that are not intended to be activated explicitly, and not
accidentally deactivate units that are not intended to be
deactivated. These options default to
C<false>. I< Optional. Type boolean.  > 

=head2 RefuseManualStop

Takes a boolean argument. If
C<true>, this unit can only be activated or
deactivated indirectly. In this case, explicit start-up or
termination requested by the user is denied, however if it is
started or stopped as a dependency of another unit, start-up
or termination will succeed. This is mostly a safety feature
to ensure that the user does not accidentally activate units
that are not intended to be activated explicitly, and not
accidentally deactivate units that are not intended to be
deactivated. These options default to
C<false>. I< Optional. Type boolean.  > 

=head2 AllowIsolate

Takes a boolean argument. If
C<true>, this unit may be used with the
systemctl isolate command. Otherwise, this
will be refused. It probably is a good idea to leave this
disabled except for target units that shall be used similar to
runlevels in SysV init systems, just as a precaution to avoid
unusable system states. This option defaults to
C<false>. I< Optional. Type boolean.  > 

=head2 DefaultDependencies

Takes a boolean argument. If
C<yes>, (the default), a few default
dependencies will implicitly be created for the unit. The
actual dependencies created depend on the unit type. For
example, for service units, these dependencies ensure that the
service is started only after basic system initialization is
completed and is properly terminated on system shutdown. See
the respective man pages for details. Generally, only services
involved with early boot or late shutdown should set this
option to C<no>. It is highly recommended to
leave this option enabled for the majority of common units. If
set to C<no>, this option does not disable
all implicit dependencies, just non-essential
ones. I< Optional. Type boolean.  > 

=head2 SurviveFinalKillSignal

Takes a boolean argument. Defaults to C<no>. If C<yes>,
processes belonging to this unit will not be sent the final C<SIGTERM> and
C<SIGKILL> signals during the final phase of the system shutdown process.
This functionality replaces the older mechanism that allowed a program to set
C<argv[0][0] = '@'> as described at
L<systemd and Storage Daemons for the Root File
System|https://systemd.io/ROOT_STORAGE_DAEMONS>, which however continues to be supported. I< Optional. Type boolean.  > 

=over 4

=item upstream_default value :

no

=back



=head2 CollectMode

Tweaks the "garbage collection" algorithm for this unit. Takes one of C<inactive>
or C<inactive-or-failed>. If set to C<inactive> the unit will be unloaded if it is
in the C<inactive> state and is not referenced by clients, jobs or other units — however it
is not unloaded if it is in the C<failed> state. In C<failed> mode, failed
units are not unloaded until the user invoked systemctl reset-failed on them to reset the
C<failed> state, or an equivalent command. This behaviour is altered if this option is set to
C<inactive-or-failed>: in this case, the unit is unloaded even if the unit is in a
C<failed> state, and thus an explicitly resetting of the C<failed> state is
not necessary. Note that if this mode is used unit results (such as exit codes, exit signals, consumed
resources, …) are flushed out immediately after the unit completed, except for what is stored in the logging
subsystem. Defaults to C<inactive>. I< Optional. Type enum. choice: 'inactive', 'inactive-or-failed'.  > 

=head2 FailureActionExitStatus

Controls the exit status to propagate back to an invoking container manager (in case of a
system service) or service manager (in case of a user manager) when the
C<FailureAction>/C<SuccessAction> are set to C<exit> or
C<exit-force> and the action is triggered. By default, the exit status of the main process of the
triggering unit (if this applies) is propagated. Takes a value in the range 0…255 or the empty string to
request default behaviour. I< Optional. Type uniline.  > 

=head2 SuccessActionExitStatus

Controls the exit status to propagate back to an invoking container manager (in case of a
system service) or service manager (in case of a user manager) when the
C<FailureAction>/C<SuccessAction> are set to C<exit> or
C<exit-force> and the action is triggered. By default, the exit status of the main process of the
triggering unit (if this applies) is propagated. Takes a value in the range 0…255 or the empty string to
request default behaviour. I< Optional. Type uniline.  > 

=head2 JobTimeoutSec

C<JobTimeoutSec> specifies a timeout for the whole job that starts
running when the job is queued. C<JobRunningTimeoutSec> specifies a timeout that
starts running when the queued job is actually started. If either limit is reached, the job will be
cancelled, the unit however will not change state or even enter the C<failed> mode.

Both settings take a time span with the default unit of seconds, but other units may be
specified, see
L<systemd.time(7)>.
The default is C<infinity> (job timeouts disabled), except for device units where
C<JobRunningTimeoutSec> defaults to C<DefaultDeviceTimeoutSec>.

Note: these timeouts are independent from any unit-specific timeouts (for example, the timeout
set with C<TimeoutStartSec> in service units). The job timeout has no effect on the
unit itself. Or in other words: unit-specific timeouts are useful to abort unit state changes, and
revert them. The job timeout set with this option however is useful to abort only the job waiting for
the unit state to change. I< Optional. Type uniline.  > 

=head2 JobRunningTimeoutSec

C<JobTimeoutSec> specifies a timeout for the whole job that starts
running when the job is queued. C<JobRunningTimeoutSec> specifies a timeout that
starts running when the queued job is actually started. If either limit is reached, the job will be
cancelled, the unit however will not change state or even enter the C<failed> mode.

Both settings take a time span with the default unit of seconds, but other units may be
specified, see
L<systemd.time(7)>.
The default is C<infinity> (job timeouts disabled), except for device units where
C<JobRunningTimeoutSec> defaults to C<DefaultDeviceTimeoutSec>.

Note: these timeouts are independent from any unit-specific timeouts (for example, the timeout
set with C<TimeoutStartSec> in service units). The job timeout has no effect on the
unit itself. Or in other words: unit-specific timeouts are useful to abort unit state changes, and
revert them. The job timeout set with this option however is useful to abort only the job waiting for
the unit state to change. I< Optional. Type uniline.  > 

=head2 JobTimeoutAction

C<JobTimeoutAction> optionally configures an additional action to
take when the timeout is hit, see description of C<JobTimeoutSec> and
C<JobRunningTimeoutSec> above. It takes the same values as
C<FailureAction>/C<SuccessAction>. Defaults to
C<none>.

C<JobTimeoutRebootArgument> configures an optional reboot string to pass to
the L<reboot(2)> system
call. I< Optional. Type uniline.  > 

=head2 JobTimeoutRebootArgument

C<JobTimeoutAction> optionally configures an additional action to
take when the timeout is hit, see description of C<JobTimeoutSec> and
C<JobRunningTimeoutSec> above. It takes the same values as
C<FailureAction>/C<SuccessAction>. Defaults to
C<none>.

C<JobTimeoutRebootArgument> configures an optional reboot string to pass to
the L<reboot(2)> system
call. I< Optional. Type uniline.  > 

=head2 StartLimitAction

Configure an additional action to take if the rate limit configured with
C<StartLimitIntervalSec> and C<StartLimitBurst> is hit. Takes the same
values as the C<FailureAction>/C<SuccessAction> settings. If
C<none> is set, hitting the rate limit will trigger no action except that
the start will not be permitted. Defaults to C<none>. I< Optional. Type enum. choice: 'exit', 'exit-force', 'halt', 'halt-force', 'halt-immediate', 'kexec', 'kexec-force', 'none', 'poweroff', 'poweroff-force', 'poweroff-immediate', 'reboot', 'reboot-force', 'reboot-immediate', 'soft-reboot', 'soft-reboot-force'.  > 

=head2 SourcePath

A path to a configuration file this unit has
been generated from. This is primarily useful for
implementation of generator tools that convert configuration
from an external configuration file format into native unit
files. This functionality should not be used in normal
units. I< Optional. Type uniline.  > 

=head2 ConditionArchitecture

Check whether the system is running on a specific architecture. Takes one of
C<x86>,
C<x86-64>,
C<ppc>,
C<ppc-le>,
C<ppc64>,
C<ppc64-le>,
C<ia64>,
C<parisc>,
C<parisc64>,
C<s390>,
C<s390x>,
C<sparc>,
C<sparc64>,
C<mips>,
C<mips-le>,
C<mips64>,
C<mips64-le>,
C<alpha>,
C<arm>,
C<arm-be>,
C<arm64>,
C<arm64-be>,
C<sh>,
C<sh64>,
C<m68k>,
C<tilegx>,
C<cris>,
C<arc>,
C<arc-be>, or
C<native>.

Use
L<systemd-analyze(1)>
for the complete list of known architectures.

The architecture is determined from the information returned by
L<uname(2)>
and is thus subject to
L<personality(2)>.
Note that a C<Personality> setting in the same unit file has no effect on this
condition. A special architecture name C<native> is mapped to the architecture the
system manager itself is compiled for. The test may be negated by prepending an exclamation
mark. I< Optional. Type list of enum.  > 

=head2 ConditionFirmware

Check whether the system's firmware is of a certain type. The following values are
possible: I< Optional. Type list of uniline.  > 

=head2 ConditionVirtualization

Check whether the system is executed in a virtualized environment and optionally
test whether it is a specific implementation. Takes either boolean value to check if being executed
in any virtualized environment, or one of
C<vm> and
C<container> to test against a generic type of virtualization solution, or one of
C<qemu>,
C<kvm>,
C<amazon>,
C<zvm>,
C<vmware>,
C<microsoft>,
C<oracle>,
C<powervm>,
C<xen>,
C<bochs>,
C<uml>,
C<bhyve>,
C<qnx>,
C<apple>,
C<sre>,
C<openvz>,
C<lxc>,
C<lxc-libvirt>,
C<systemd-nspawn>,
C<docker>,
C<podman>,
C<rkt>,
C<wsl>,
C<proot>,
C<pouch>,
C<acrn> to test
against a specific implementation, or
C<private-users> to check whether we are running in a user namespace. See
L<systemd-detect-virt(1)>
for a full list of known virtualization technologies and their identifiers. If multiple
virtualization technologies are nested, only the innermost is considered. The test may be negated
by prepending an exclamation mark. I< Optional. Type list of uniline.  > 

=head2 ConditionHost

C<ConditionHost> may be used to match against the hostname,
machine ID, boot ID or product UUID of the host. This either takes a hostname string (optionally
with shell style globs) which is tested against the locally set hostname as returned by
L<gethostname(2)>, or
a 128bit ID or UUID, formatted as string. The latter is compared against machine ID, boot ID and the
firmware product UUID if there is any. See
L<machine-id(5)> for
details about the machine ID. The test may be negated by prepending an exclamation mark. I< Optional. Type list of uniline.  > 

=head2 ConditionKernelCommandLine

C<ConditionKernelCommandLine> may be used to check whether a
specific kernel command line option is set (or if prefixed with the exclamation mark — unset). The
argument must either be a single word, or an assignment (i.e. two words, separated by
C<=>). In the former case the kernel command line is searched for the word
appearing as is, or as left hand side of an assignment. In the latter case, the exact assignment is
looked for with right and left hand side matching. This operates on the kernel command line
communicated to userspace via C</proc/cmdline>, except when the service manager
is invoked as payload of a container manager, in which case the command line of C<PID
1> is used instead (i.e. C</proc/1/cmdline>). I< Optional. Type list of uniline.  > 

=head2 ConditionKernelVersion

C<ConditionKernelVersion> may be used to check whether the kernel
version (as reported by uname -r) matches a certain expression, or if prefixed
with the exclamation mark, does not match. The argument must be a list of (potentially quoted)
expressions. Each expression starts with one of C<=> or C<!=> for
string comparisons, C<< < >>, C<< <= >>, C<==>,
C<< <> >>, C<< >= >>, C<< > >> for version
comparisons, or C<$=>, C<!$=> for a shell-style glob match. If no
operator is specified, C<$=> is implied.

Note that using the kernel version string is an unreliable way to determine which features
are supported by a kernel, because of the widespread practice of backporting drivers, features, and
fixes from newer upstream kernels into older versions provided by distributions. Hence, this check
is inherently unportable and should not be used for units which may be used on different
distributions. I< Optional. Type list of uniline.  > 

=head2 ConditionVersion

C<ConditionVersion> may be used to check whether a software
version matches a certain expression, or if prefixed with the exclamation mark, does not match.
The first argument is the software whose version has to be checked. Currently
C<kernel>, C<systemd> and C<glibc> are supported.
If this argument is omitted, C<kernel> is implied. The second argument must be a
list of (potentially quoted) expressions. Each expression starts with one of C<=>
or C<!=> for string comparisons, C<< < >>, C<< <= >>,
C<==>, C<< <> >>, C<< >= >>,
C<< > >> for version comparisons, or C<$=>, C<!$=>
for a shell-style glob match. If no operator is specified, C<$=> is implied. I< Optional. Type list of uniline.  > 

=head2 ConditionCredential

C<ConditionCredential> may be used to check whether a credential
by the specified name was passed into the service manager. See L<System and Service
Credentials|https://systemd.io/CREDENTIALS> for details about
credentials. If used in services for the system service manager this may be used to conditionalize
services based on system credentials passed in. If used in services for the per-user service
manager this may be used to conditionalize services based on credentials passed into the
C<unit@.service> service instance belonging to the user. The argument must be a
valid credential name. I< Optional. Type list of uniline.  > 

=head2 ConditionEnvironment

C<ConditionEnvironment> may be used to check whether a specific
environment variable is set (or if prefixed with the exclamation mark — unset) in the service
manager's environment block.
The argument may be a single word, to check if the variable with this name is defined in the
environment block, or an assignment
(C<name=value>), to check if
the variable with this exact value is defined. Note that the environment block of the service
manager itself is checked, i.e. not any variables defined with C<Environment> or
C<EnvironmentFile>, as described above. This is particularly useful when the
service manager runs inside a containerized environment or as per-user service manager, in order to
check for variables passed in by the enclosing container manager or PAM. I< Optional. Type list of uniline.  > 

=head2 ConditionSecurity

C<ConditionSecurity> may be used to check whether the given
security technology is enabled on the system. Currently, the following values are recognized:

The test may be negated by prepending an exclamation mark. I< Optional. Type list of uniline.  > 

=head2 ConditionCapability

Check whether the given capability exists in the capability bounding set of the
service manager (i.e. this does not check whether capability is actually available in the permitted
or effective sets, see
L<capabilities(7)>
for details). Pass a capability name such as C<CAP_MKNOD>, possibly prefixed with
an exclamation mark to negate the check. I< Optional. Type list of uniline.  > 

=head2 ConditionACPower

Check whether the system has AC power, or is exclusively battery powered at the
time of activation of the unit. This takes a boolean argument. If set to C<true>,
the condition will hold only if at least one AC connector of the system is connected to a power
source, or if no AC connectors are known. Conversely, if set to C<false>, the
condition will hold only if there is at least one AC connector known and all AC connectors are
disconnected from a power source. I< Optional. Type list of uniline.  > 

=head2 ConditionNeedsUpdate

Takes one of C</var/> or C</etc/> as argument,
possibly prefixed with a C<!> (to invert the condition). This condition may be
used to conditionalize units on whether the specified directory requires an update because
C</usr/>'s modification time is newer than the stamp file
C<.updated> in the specified directory. This is useful to implement offline
updates of the vendor operating system resources in C</usr/> that require updating
of C</etc/> or C</var/> on the next following boot. Units making
use of this condition should order themselves before
L<systemd-update-done.service(8)>,
to make sure they run before the stamp file's modification time gets reset indicating a completed
update.

If the C<systemd.condition_needs_update=> option is specified on the kernel
command line (taking a boolean), it will override the result of this condition check, taking
precedence over any file modification time checks. If the kernel command line option is used,
C<systemd-update-done.service> will not have immediate effect on any following
C<ConditionNeedsUpdate> checks, until the system is rebooted where the kernel
command line option is not specified anymore.

Note that to make this scheme effective, the timestamp of C</usr/> should
be explicitly updated after its contents are modified. The kernel will automatically update
modification timestamp on a directory only when immediate children of a directory are modified; an
modification of nested files will not automatically result in mtime of C</usr/>
being updated.

Also note that if the update method includes a call to execute appropriate post-update steps
itself, it should not touch the timestamp of C</usr/>. In a typical distribution
packaging scheme, packages will do any required update steps as part of the installation or
upgrade, to make package contents immediately usable. C<ConditionNeedsUpdate>
should be used with other update mechanisms where such an immediate update does not
happen. I< Optional. Type list of enum.  > 

=head2 ConditionFirstBoot

Takes a boolean argument. This condition may be used to conditionalize units on
whether the system is booting up for the first time. This roughly means that C</etc/>
was unpopulated when the system started booting (for details, see "First Boot Semantics" in
L<machine-id(5)>).
First Boot is considered finished (this condition will evaluate as false) after the manager
has finished the startup phase.

This condition may be used to populate C</etc/> on the first boot after
factory reset, or when a new system instance boots up for the first time.

Note that the service manager itself will perform setup steps during First Boot: it will
initialize
L<machine-id(5)> and
preset all units, enabling or disabling them according to the
L<systemd.preset(5)>
settings. Additional setup may be performed via units with
C<ConditionFirstBoot=yes>.

For robustness, units with C<ConditionFirstBoot=yes> should order themselves
before C<first-boot-complete.target> and pull in this passive target with
C<Wants>. This ensures that in a case of an aborted first boot, these units will
be re-run during the next system startup.

If the C<systemd.condition_first_boot=> option is specified on the kernel
command line (taking a boolean), it will override the result of this condition check, taking
precedence over C</etc/machine-id> existence checks. I< Optional. Type list of boolean.  > 

=head2 ConditionPathExists

Check for the existence of a file. If the specified absolute path name does not exist,
the condition will fail. If the absolute path name passed to
C<ConditionPathExists> is prefixed with an exclamation mark
(C<!>), the test is negated, and the unit is only started if the path does not
exist. I< Optional. Type list of uniline.  > 

=head2 ConditionPathExistsGlob

C<ConditionPathExistsGlob> is similar to
C<ConditionPathExists>, but checks for the existence of at least one file or
directory matching the specified globbing pattern. I< Optional. Type list of uniline.  > 

=head2 ConditionPathIsDirectory

C<ConditionPathIsDirectory> is similar to
C<ConditionPathExists> but verifies that a certain path exists and is a
directory. I< Optional. Type list of uniline.  > 

=head2 ConditionPathIsSymbolicLink

C<ConditionPathIsSymbolicLink> is similar to
C<ConditionPathExists> but verifies that a certain path exists and is a symbolic
link. I< Optional. Type list of uniline.  > 

=head2 ConditionPathIsMountPoint

C<ConditionPathIsMountPoint> is similar to
C<ConditionPathExists> but verifies that a certain path exists and is a mount
point. I< Optional. Type list of uniline.  > 

=head2 ConditionPathIsReadWrite

C<ConditionPathIsReadWrite> is similar to
C<ConditionPathExists> but verifies that the underlying file system is readable
and writable (i.e. not mounted read-only). I< Optional. Type list of uniline.  > 

=head2 ConditionPathIsEncrypted

C<ConditionPathIsEncrypted> is similar to
C<ConditionPathExists> but verifies that the underlying file system's backing
block device is encrypted using dm-crypt/LUKS. Note that this check does not cover ext4
per-directory encryption, and only detects block level encryption. Moreover, if the specified path
resides on a file system on top of a loopback block device, only encryption above the loopback device is
detected. It is not detected whether the file system backing the loopback block device is encrypted. I< Optional. Type list of uniline.  > 

=head2 ConditionDirectoryNotEmpty

C<ConditionDirectoryNotEmpty> is similar to
C<ConditionPathExists> but verifies that a certain path exists and is a non-empty
directory. I< Optional. Type list of uniline.  > 

=head2 ConditionFileNotEmpty

C<ConditionFileNotEmpty> is similar to
C<ConditionPathExists> but verifies that a certain path exists and refers to a
regular file with a non-zero size. I< Optional. Type list of uniline.  > 

=head2 ConditionFileIsExecutable

C<ConditionFileIsExecutable> is similar to
C<ConditionPathExists> but verifies that a certain path exists, is a regular file,
and marked executable. I< Optional. Type list of uniline.  > 

=head2 ConditionUser

C<ConditionUser> takes a numeric C<UID>, a UNIX
user name, or the special value C<@system>. This condition may be used to check
whether the service manager is running as the given user. The special value
C<@system> can be used to check if the user id is within the system user
range. This option is not useful for system services, as the system manager exclusively runs as the
root user, and thus the test result is constant. I< Optional. Type list of uniline.  > 

=head2 ConditionGroup

C<ConditionGroup> is similar to C<ConditionUser>
but verifies that the service manager's real or effective group, or any of its auxiliary groups,
match the specified group or GID. This setting does not support the special value
C<@system>. I< Optional. Type list of uniline.  > 

=head2 ConditionControlGroupController

Check whether given cgroup controllers (e.g. C<cpu>) are available
for use on the system or whether the legacy v1 cgroup or the modern v2 cgroup hierarchy is used.

Multiple controllers may be passed with a space separating them; in this case, the condition
will only pass if all listed controllers are available for use. Controllers unknown to systemd are
ignored. Valid controllers are C<cpu>, C<io>,
C<memory>, and C<pids>. Even if available in the kernel, a
particular controller may not be available if it was disabled on the kernel command line with
C<cgroup_disable=controller>.

Alternatively, two special strings C<v1> and C<v2> may be
specified (without any controller names). C<v2> will pass if the unified v2 cgroup
hierarchy is used, and C<v1> will pass if the legacy v1 hierarchy or the hybrid
hierarchy are used. Note that legacy or hybrid hierarchies have been deprecated. See
L<systemd(1)> for
more information. I< Optional. Type list of uniline.  > 

=head2 ConditionMemory

Verify that the specified amount of system memory is available to the current
system. Takes a memory size in bytes as argument, optionally prefixed with a comparison operator
C<< < >>, C<< <= >>, C<=> (or C<==>),
C<!=> (or C<< <> >>), C<< >= >>,
C<< > >>. On bare-metal systems compares the amount of physical memory in the system
with the specified size, adhering to the specified comparison operator. In containers compares the
amount of memory assigned to the container instead. I< Optional. Type list of uniline.  > 

=head2 ConditionCPUs

Verify that the specified number of CPUs is available to the current system. Takes
a number of CPUs as argument, optionally prefixed with a comparison operator
C<< < >>, C<< <= >>, C<=> (or C<==>),
C<!=> (or C<< <> >>), C<< >= >>,
C<< > >>. Compares the number of CPUs in the CPU affinity mask configured of the
service manager itself with the specified number, adhering to the specified comparison operator. On
physical systems the number of CPUs in the affinity mask of the service manager usually matches the
number of physical CPUs, but in special and virtual environments might differ. In particular, in
containers the affinity mask usually matches the number of CPUs assigned to the container and not
the physically available ones. I< Optional. Type list of uniline.  > 

=head2 ConditionCPUFeature

Verify that a given CPU feature is available via the C<CPUID>
instruction. This condition only does something on i386 and x86-64 processors. On other
processors it is assumed that the CPU does not support the given feature. It checks the leaves
C<1>, C<7>, C<0x80000001>, and
C<0x80000007>. Valid values are:
C<fpu>,
C<vme>,
C<de>,
C<pse>,
C<tsc>,
C<msr>,
C<pae>,
C<mce>,
C<cx8>,
C<apic>,
C<sep>,
C<mtrr>,
C<pge>,
C<mca>,
C<cmov>,
C<pat>,
C<pse36>,
C<clflush>,
C<mmx>,
C<fxsr>,
C<sse>,
C<sse2>,
C<ht>,
C<pni>,
C<pclmul>,
C<monitor>,
C<ssse3>,
C<fma3>,
C<cx16>,
C<sse4_1>,
C<sse4_2>,
C<movbe>,
C<popcnt>,
C<aes>,
C<xsave>,
C<osxsave>,
C<avx>,
C<f16c>,
C<rdrand>,
C<bmi1>,
C<avx2>,
C<bmi2>,
C<rdseed>,
C<adx>,
C<sha_ni>,
C<syscall>,
C<rdtscp>,
C<lm>,
C<lahf_lm>,
C<abm>,
C<constant_tsc>. I< Optional. Type list of uniline.  > 

=head2 ConditionOSRelease

Verify that a specific C<key=value> pair is set in the host's
L<os-release(5)>.

Other than exact string matching (with C<=> and C<!=>),
relative comparisons are supported for versioned parameters (e.g. C<VERSION_ID>;
with C<< < >>, C<< <= >>, C<==>,
C<< <> >>, C<< >= >>, C<< > >>), and shell-style
wildcard comparisons (C<*>, C<?>, C<[]>) are
supported with the C<$=> (match) and C<!$=> (non-match).

If the given key is not found in the file, the match is done against an empty value. I< Optional. Type list of uniline.  > 

=head2 ConditionMemoryPressure

Verify that the overall system (memory, CPU or IO) pressure is below or equal to a threshold.
This setting takes a threshold value as argument. It can be specified as a simple percentage value,
suffixed with C<%>, in which case the pressure will be measured as an average over the last
five minutes before the attempt to start the unit is performed.
Alternatively, the average timespan can also be specified using C</> as a separator, for
example: C<10%/1min>. The supported timespans match what the kernel provides, and are
limited to C<10sec>, C<1min> and C<5min>. The
C<full> PSI will be checked first, and if not found C<some> will be
checked. For more details, see the documentation on L<PSI (Pressure Stall
Information)|https://docs.kernel.org/accounting/psi.html>.

Optionally, the threshold value can be prefixed with the slice unit under which the pressure will be checked,
followed by a C<:>. If the slice unit is not specified, the overall system pressure will be measured,
instead of a particular cgroup's. I< Optional. Type list of uniline.  > 

=head2 ConditionCPUPressure

Verify that the overall system (memory, CPU or IO) pressure is below or equal to a threshold.
This setting takes a threshold value as argument. It can be specified as a simple percentage value,
suffixed with C<%>, in which case the pressure will be measured as an average over the last
five minutes before the attempt to start the unit is performed.
Alternatively, the average timespan can also be specified using C</> as a separator, for
example: C<10%/1min>. The supported timespans match what the kernel provides, and are
limited to C<10sec>, C<1min> and C<5min>. The
C<full> PSI will be checked first, and if not found C<some> will be
checked. For more details, see the documentation on L<PSI (Pressure Stall
Information)|https://docs.kernel.org/accounting/psi.html>.

Optionally, the threshold value can be prefixed with the slice unit under which the pressure will be checked,
followed by a C<:>. If the slice unit is not specified, the overall system pressure will be measured,
instead of a particular cgroup's. I< Optional. Type list of uniline.  > 

=head2 ConditionIOPressure

Verify that the overall system (memory, CPU or IO) pressure is below or equal to a threshold.
This setting takes a threshold value as argument. It can be specified as a simple percentage value,
suffixed with C<%>, in which case the pressure will be measured as an average over the last
five minutes before the attempt to start the unit is performed.
Alternatively, the average timespan can also be specified using C</> as a separator, for
example: C<10%/1min>. The supported timespans match what the kernel provides, and are
limited to C<10sec>, C<1min> and C<5min>. The
C<full> PSI will be checked first, and if not found C<some> will be
checked. For more details, see the documentation on L<PSI (Pressure Stall
Information)|https://docs.kernel.org/accounting/psi.html>.

Optionally, the threshold value can be prefixed with the slice unit under which the pressure will be checked,
followed by a C<:>. If the slice unit is not specified, the overall system pressure will be measured,
instead of a particular cgroup's. I< Optional. Type list of uniline.  > 

=head2 ConditionKernelModuleLoaded

Test whether the specified kernel module has been loaded and is already fully
initialized. I< Optional. Type list of uniline.  > 

=head2 AssertArchitecture

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertVirtualization

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertHost

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertKernelCommandLine

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertKernelVersion

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertVersion

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertCredential

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertEnvironment

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertSecurity

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertCapability

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertACPower

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertNeedsUpdate

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertFirstBoot

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertPathExists

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertPathExistsGlob

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertPathIsDirectory

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertPathIsSymbolicLink

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertPathIsMountPoint

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertPathIsReadWrite

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertPathIsEncrypted

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertDirectoryNotEmpty

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertFileNotEmpty

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertFileIsExecutable

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertUser

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertGroup

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertControlGroupController

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertMemory

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertCPUs

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertCPUFeature

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertOSRelease

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertMemoryPressure

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertCPUPressure

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertIOPressure

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 AssertKernelModuleLoaded

Similar to the C<ConditionArchitecture>,
C<ConditionVirtualization>, …, condition settings described above, these settings
add assertion checks to the start-up of the unit. However, unlike the conditions settings, any
assertion setting that is not met results in failure of the start job (which means this is logged
loudly). Note that hitting a configured assertion does not cause the unit to enter the
C<failed> state (or in fact result in any state change of the unit), it affects
only the job queued for it. Use assertion expressions for units that cannot operate when specific
requirements are not met, and when this is something the administrator or user should look
into. I< Optional. Type uniline.  > 

=head2 StartLimitInterval

B<Deprecated> I< Optional. Type uniline.  > 

=head2 OnFailureIsolate

B<Deprecated> I< Optional. Type uniline.  > 

=head2 FailureAction

Configure the action to take when the unit stops and enters a failed state or
inactive state.  Takes one of C<none>, C<reboot>,
C<reboot-force>, C<reboot-immediate>, C<poweroff>,
C<poweroff-force>, C<poweroff-immediate>, C<exit>,
C<exit-force>, C<soft-reboot>, C<soft-reboot-force>,
C<kexec>, C<kexec-force>, C<halt>,
C<halt-force> and C<halt-immediate>. In system mode, all options are
allowed. In user mode, only C<none>, C<exit>, and
C<exit-force> are allowed. Both options default to C<none>.

If C<none> is set, no action will be triggered. C<reboot> causes a
reboot following the normal shutdown procedure (i.e. equivalent to systemctl
reboot).  C<reboot-force> causes a forced reboot which will terminate all
processes forcibly but should cause no dirty file systems on reboot (i.e. equivalent to
systemctl reboot -f) and C<reboot-immediate> causes immediate
execution of the
L<reboot(2)> system
call, which might result in data loss (i.e. equivalent to systemctl reboot -ff).
Similarly, C<poweroff>, C<poweroff-force>,
C<poweroff-immediate>, C<kexec>, C<kexec-force>,
C<halt>, C<halt-force> and C<halt-immediate> have the
effect of powering down the system, executing kexec, and halting the system respectively with similar
semantics. C<exit> causes the manager to exit following the normal shutdown procedure,
and C<exit-force> causes it terminate without shutting down services. When
C<exit> or C<exit-force> is used by default the exit status of the main
process of the unit (if this applies) is returned from the service manager. However, this may be
overridden with
C<FailureActionExitStatus>/C<SuccessActionExitStatus>, see below.
C<soft-reboot> will trigger a userspace reboot operation.
C<soft-reboot-force> does that too, but does not go through the shutdown transaction
beforehand. I< Optional. Type enum. choice: 'exit', 'exit-force', 'halt', 'halt-force', 'halt-immediate', 'kexec', 'kexec-force', 'none', 'poweroff', 'poweroff-force', 'poweroff-immediate', 'reboot', 'reboot-force', 'reboot-immediate', 'soft-reboot', 'soft-reboot-force'.  > 

=head2 SuccessAction

Configure the action to take when the unit stops and enters a failed state or
inactive state.  Takes one of C<none>, C<reboot>,
C<reboot-force>, C<reboot-immediate>, C<poweroff>,
C<poweroff-force>, C<poweroff-immediate>, C<exit>,
C<exit-force>, C<soft-reboot>, C<soft-reboot-force>,
C<kexec>, C<kexec-force>, C<halt>,
C<halt-force> and C<halt-immediate>. In system mode, all options are
allowed. In user mode, only C<none>, C<exit>, and
C<exit-force> are allowed. Both options default to C<none>.

If C<none> is set, no action will be triggered. C<reboot> causes a
reboot following the normal shutdown procedure (i.e. equivalent to systemctl
reboot).  C<reboot-force> causes a forced reboot which will terminate all
processes forcibly but should cause no dirty file systems on reboot (i.e. equivalent to
systemctl reboot -f) and C<reboot-immediate> causes immediate
execution of the
L<reboot(2)> system
call, which might result in data loss (i.e. equivalent to systemctl reboot -ff).
Similarly, C<poweroff>, C<poweroff-force>,
C<poweroff-immediate>, C<kexec>, C<kexec-force>,
C<halt>, C<halt-force> and C<halt-immediate> have the
effect of powering down the system, executing kexec, and halting the system respectively with similar
semantics. C<exit> causes the manager to exit following the normal shutdown procedure,
and C<exit-force> causes it terminate without shutting down services. When
C<exit> or C<exit-force> is used by default the exit status of the main
process of the unit (if this applies) is returned from the service manager. However, this may be
overridden with
C<FailureActionExitStatus>/C<SuccessActionExitStatus>, see below.
C<soft-reboot> will trigger a userspace reboot operation.
C<soft-reboot-force> does that too, but does not go through the shutdown transaction
beforehand. I< Optional. Type enum. choice: 'exit', 'exit-force', 'halt', 'halt-force', 'halt-immediate', 'kexec', 'kexec-force', 'none', 'poweroff', 'poweroff-force', 'poweroff-immediate', 'reboot', 'reboot-force', 'reboot-immediate', 'soft-reboot', 'soft-reboot-force'.  > 

=head2 StartLimitBurst

Configure unit start rate limiting. Units which are started more than
burst times within an interval time span are
not permitted to start any more. Use C<StartLimitIntervalSec> to configure the
checking interval and C<StartLimitBurst> to configure how many starts per interval
are allowed.

interval is a time span with the default unit of seconds, but other
units may be specified, see
L<systemd.time(7)>.
The special value C<infinity> can be used to limit the total number of start
attempts, even if they happen at large time intervals.
Defaults to C<DefaultStartLimitIntervalSec> in manager configuration file, and may
be set to 0 to disable any kind of rate limiting. burst is a number and
defaults to C<DefaultStartLimitBurst> in manager configuration file.

These configuration options are particularly useful in conjunction with the service setting
C<Restart> (see
L<systemd.service(5)>);
however, they apply to all kinds of starts (including manual), not just those triggered by the
C<Restart> logic.

Note that units which are configured for C<Restart>, and which reach the start
limit are not attempted to be restarted anymore; however, they may still be restarted manually or
from a timer or socket at a later point, after the interval has passed.
From that point on, the restart logic is activated again. systemctl reset-failed
will cause the restart rate counter for a service to be flushed, which is useful if the administrator
wants to manually start a unit and the start limit interferes with that. Rate-limiting is enforced
after any unit condition checks are executed, and hence unit activations with failing conditions do
not count towards the rate limit.

When a unit is unloaded due to the garbage collection logic (see above) its rate limit counters
are flushed out too. This means that configuring start rate limiting for a unit that is not
referenced continuously has no effect.

This setting does not apply to slice, target, device, and scope units, since they are unit
types whose activation may either never fail, or may succeed only a single time. I< Optional. Type uniline.  > 

=head2 StartLimitIntervalSec

Configure unit start rate limiting. Units which are started more than
burst times within an interval time span are
not permitted to start any more. Use C<StartLimitIntervalSec> to configure the
checking interval and C<StartLimitBurst> to configure how many starts per interval
are allowed.

interval is a time span with the default unit of seconds, but other
units may be specified, see
L<systemd.time(7)>.
The special value C<infinity> can be used to limit the total number of start
attempts, even if they happen at large time intervals.
Defaults to C<DefaultStartLimitIntervalSec> in manager configuration file, and may
be set to 0 to disable any kind of rate limiting. burst is a number and
defaults to C<DefaultStartLimitBurst> in manager configuration file.

These configuration options are particularly useful in conjunction with the service setting
C<Restart> (see
L<systemd.service(5)>);
however, they apply to all kinds of starts (including manual), not just those triggered by the
C<Restart> logic.

Note that units which are configured for C<Restart>, and which reach the start
limit are not attempted to be restarted anymore; however, they may still be restarted manually or
from a timer or socket at a later point, after the interval has passed.
From that point on, the restart logic is activated again. systemctl reset-failed
will cause the restart rate counter for a service to be flushed, which is useful if the administrator
wants to manually start a unit and the start limit interferes with that. Rate-limiting is enforced
after any unit condition checks are executed, and hence unit activations with failing conditions do
not count towards the rate limit.

When a unit is unloaded due to the garbage collection logic (see above) its rate limit counters
are flushed out too. This means that configuring start rate limiting for a unit that is not
referenced continuously has no effect.

This setting does not apply to slice, target, device, and scope units, since they are unit
types whose activation may either never fail, or may succeed only a single time. I< Optional. Type uniline.  > 

=head2 RebootArgument

Configure the optional argument for the
L<reboot(2)> system call if
C<StartLimitAction> or C<FailureAction> is a reboot action. This
works just like the optional argument to systemctl reboot command. I< Optional. Type uniline.  > 

=head1 SEE ALSO

=over

=item *

L<cme>

=back

=cut

